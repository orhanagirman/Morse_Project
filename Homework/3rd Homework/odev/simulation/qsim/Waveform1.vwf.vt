// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/24/2019 20:24:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          odev
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module odev_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN;
reg WR;
reg add0;
reg add1;
reg clk;
reg i0;
reg i2;
reg i3;
reg i4;
reg i5;
reg i6;
reg i7;
reg i8;
// wires                                               
wire out1;
wire out2;
wire out3;
wire out4;
wire out5;
wire out6;
wire out7;
wire out8;

// assign statements (if any)                          
odev i1 (
// port map - connection between master ports and signals/registers   
	.EN(EN),
	.WR(WR),
	.add0(add0),
	.add1(add1),
	.clk(clk),
	.i0(i0),
	.i2(i2),
	.i3(i3),
	.i4(i4),
	.i5(i5),
	.i6(i6),
	.i7(i7),
	.i8(i8),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.out8(out8)
);
initial 
begin 
#800000 $finish;
end 

// EN
initial
begin
	EN = 1'b1;
end 

// WR
initial
begin
	WR = 1'b0;
	WR = #100000 1'b1;
	WR = #100000 1'b0;
	WR = #100000 1'b1;
	WR = #100000 1'b0;
	WR = #100000 1'b1;
	WR = #100000 1'b0;
	WR = #100000 1'b1;
end 

// add0
initial
begin
	add0 = 1'b0;
	add0 = #200000 1'b1;
	add0 = #200000 1'b0;
	add0 = #200000 1'b1;
end 

// add1
initial
begin
	add1 = 1'b0;
	add1 = #400000 1'b1;
end 

// clk
initial
begin
	clk = 1'b1;
	clk = #400000 1'b0;
	clk = #200000 1'b1;
end 

// i0
initial
begin
	i0 = 1'b0;
	i0 = #200000 1'b1;
	i0 = #100000 1'b0;
	i0 = #100000 1'b1;
	i0 = #100000 1'b0;
end 

// i2
initial
begin
	i2 = 1'b0;
	i2 = #400000 1'b1;
	i2 = #100000 1'b0;
end 

// i3
initial
begin
	i3 = 1'b0;
	i3 = #200000 1'b1;
	i3 = #100000 1'b0;
	i3 = #300000 1'b1;
	i3 = #100000 1'b0;
end 

// i4
initial
begin
	i4 = 1'b1;
	i4 = #100000 1'b0;
end 

// i5
initial
begin
	i5 = 1'b0;
	i5 = #200000 1'b1;
	i5 = #100000 1'b0;
	i5 = #100000 1'b1;
	i5 = #100000 1'b0;
end 

// i6
initial
begin
	i6 = 1'b0;
	i6 = #400000 1'b1;
	i6 = #100000 1'b0;
end 

// i7
initial
begin
	i7 = 1'b0;
	i7 = #200000 1'b1;
	i7 = #100000 1'b0;
	i7 = #300000 1'b1;
	i7 = #100000 1'b0;
end 

// i8
initial
begin
	i8 = 1'b1;
	i8 = #100000 1'b0;
end 
endmodule

