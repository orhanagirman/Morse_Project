// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/03/2020 21:11:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          multiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg mc0;
reg mc1;
reg mc2;
reg mc3;
reg ml0;
reg ml1;
reg start;
// wires                                               
wire out1;
wire out2;
wire out3;
wire out4;
wire out5;
wire out6;

// assign statements (if any)                          
multiplier i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.mc0(mc0),
	.mc1(mc1),
	.mc2(mc2),
	.mc3(mc3),
	.ml0(ml0),
	.ml1(ml1),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.start(start)
);
initial 
begin 
#100000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #10000000 1'b1;
	clock = #10000000 1'b0;
	clock = #10000000 1'b1;
	clock = #10000000 1'b0;
	clock = #10000000 1'b1;
	clock = #10000000 1'b0;
	clock = #10000000 1'b1;
	clock = #10000000 1'b0;
end 

// mc0
initial
begin
	mc0 = 1'b1;
end 

// mc1
initial
begin
	mc1 = 1'b0;
end 

// mc2
initial
begin
	mc2 = 1'b0;
end 

// mc3
initial
begin
	mc3 = 1'b0;
end 

// ml0
initial
begin
	ml0 = 1'b1;
end 

// ml1
initial
begin
	ml1 = 1'b0;
end 

// start
initial
begin
	start = 1'b1;
end 
endmodule

